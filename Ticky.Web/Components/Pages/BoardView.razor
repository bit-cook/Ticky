@page "/"
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject IJSRuntime _js

@if (_columns is not null)
{
    <section id="board-section" class="w-full flex-row gap-5 overflow-x-auto py-6">
        <div class="ml-12 flex flex-row gap-5">
            @foreach (var column in _columns)
            {
                <div class="board-column gap-1">
                    <div class="flex w-full flex-row items-start justify-between">
                        <div class="flex flex-row items-center gap-2">
                            <label class="align-middle">
                                @column.Name
                            </label>
                        </div>
                    </div>

                    <SortableList Id=@($"{COLUMN_PREFIX}{column.Id}") Animation="200" Class="min-h-[1rem] w-full overflow-y-auto" Group="group" Items="column.Cards.OrderBy(x => x.Index).ToList()" Context="context" OnRemove="OnMovedFromColumn" OnUpdate="OnMovedWithinList">
                        <SortableItemTemplate>
                            <CardView Card="@context" />
                        </SortableItemTemplate>
                    </SortableList>
                </div>
            }
        </div>
    </section>
}
else
{
    <Spinner />
}

@code {
    private const string COLUMN_PREFIX = "column_";

    private List<Column>? _columns;

    private bool _justAdded;
    private int _adding;
    private int? _initialCardId;
    private DotNetObjectReference<BoardView>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        objRef = DotNetObjectReference.Create(this);
        await HandleUpdate();
    }

    private int GetColumnIdFromString(string str)
        => Convert.ToInt32(str.Replace(COLUMN_PREFIX, string.Empty));

    private async Task OnMovedWithinList((int oldIndex, int newIndex, string columnId) args)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetColumn = db.Columns
            .Include(x => x.Cards)
            .FirstOrDefault(x => x.Id.Equals(GetColumnIdFromString(args.columnId)));

        if (targetColumn is null)
            return;

        IndexHelper.ChangeOrderOfItem(targetColumn.Cards, args.oldIndex, args.newIndex);

        await db.SaveChangesAsync();
        await HandleUpdate();
    }

    private async Task OnMovedFromColumn((int oldIndex, int newIndex, string oldColumnId, string newColumnId, double x, double y) args)
    {
        var oldColumnId = GetColumnIdFromString(args.oldColumnId);
        var newColumnId = GetColumnIdFromString(args.newColumnId);

        using var db = _dbContextFactory.CreateDbContext();

        var targetColumns = await db.Columns
            .Where(x => x.Id.Equals(oldColumnId) || x.Id.Equals(newColumnId))
            .Include(x => x.Cards)
            .ToListAsync();

        var oldColumn = targetColumns.FirstOrDefault(x => x.Id.Equals(oldColumnId));
        var newColumn = targetColumns.FirstOrDefault(x => x.Id.Equals(newColumnId));

        if (oldColumn is null || newColumn is null)
            return;

        var targetCard = oldColumn.Cards.OrderBy(x => x.Index).ElementAtOrDefault(args.oldIndex);

        if (targetCard is null)
            return;

        oldColumn.Cards.Remove(targetCard);

        IndexHelper.FixIndices(oldColumn.Cards);

        foreach (var card in newColumn.Cards)
        {
            if (card.Index >= args.newIndex)
            {
                card.Index++;
            }
        }

        newColumn.Cards.Add(targetCard);
        targetCard.Index = args.newIndex;
        targetCard.ColumnId = newColumnId;

        IndexHelper.FixIndices(newColumn.Cards);

        await db.SaveChangesAsync();
        await HandleUpdate();
    }

    protected async Task HandleUpdate()
    {
        using var db = _dbContextFactory.CreateDbContext();
        _columns = await db.Columns.Include(x => x.Cards).ToListAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}

