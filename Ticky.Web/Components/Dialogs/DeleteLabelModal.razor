@using Ticky.Base.Entities
@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref="Modal" Title="Delete label" OnSubmitAttempted="OnSubmitAttempted" RedSubmit="true">
    Are you sure you'd like to delete the label <b>@_labelText</b> which is used on <b>@_usedIn</b> cards?<br />
    <b>This action is irreversible.</b>
</Modal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private string? _labelText;
    private int? _usedIn;
    private int? _labelId;

    public async void Open(int labelId, string labelText, int usedIn)
    {
        _labelId = labelId;
        _labelText = labelText;
        _usedIn = usedIn;

        if (_user.InstantDelete)
        {
            await OnSubmitAttempted();
            return;
        }

        StateHasChanged();
        base.Open();
    }

    private async Task OnSubmitAttempted()
    {
        if(Modal is null)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var targetLabel = await db.Labels
            .FirstOrDefaultAsync(x => x.Id.Equals(_labelId));

        if (targetLabel is null)
            return;

        db.Remove(targetLabel);
        await db.SaveChangesAsync();

        await Modal.Close();
        await OnSubmit.InvokeAsync();
    }
}