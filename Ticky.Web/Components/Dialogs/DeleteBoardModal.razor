@using Ticky.Base.Entities
@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref="Modal" Title="Delete board" OnSubmitAttempted="OnSubmitAttempted" RedSubmit="true">
    Are you sure you'd like to delete the board <b>@_boardName</b>?<br />
    All cards and data associated with this board will be deleted.<br/>
    <b>This action is irreversible.</b>
</Modal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private int? _boardId;
    private string? _boardName;

    public async void Open(int boardId, string boardName)
    {
        _boardId = boardId;
        _boardName = boardName;

        if(_user.InstantDelete)
        {
            await OnSubmitAttempted();
            return;
        }

        StateHasChanged();
        base.Open();
    }

    private async Task OnSubmitAttempted()
    {
        if(Modal is null)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var targetBoard = await db.Boards.FirstOrDefaultAsync(x => x.Id.Equals(_boardId));

        if (targetBoard is null)
            return;

        db.Boards.Remove(targetBoard);
        await db.SaveChangesAsync();

        await Modal.Close();
        await OnSubmit.InvokeAsync();
    }
}