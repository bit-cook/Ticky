@using Ticky.Base.Entities
@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref="Modal" Title="Delete card" OnSubmitAttempted="OnSubmitAttempted" RedSubmit="true">
    Are you sure you'd like to delete the card <b>@_taskIdentifier</b>?<br />
    All data associated with this card will be deleted.<br />
    <b>This action is irreversible.</b>
</Modal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private int? _taskId;
    private string? _taskIdentifier;

    public async void Open(int taskId, string taskIdentifier)
    {
        _taskId = taskId;
        _taskIdentifier = taskIdentifier;

        if (_user.InstantDelete)
        {
            await OnSubmitAttempted();
            return;
        }

        StateHasChanged();
        base.Open();
    }

    private async Task OnSubmitAttempted()
    {
        if(Modal is null)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var targetTask = await db.Cards
            .Include(x => x.Column)
                .ThenInclude(x => x.Cards)
            .FirstOrDefaultAsync(x => x.Id.Equals(_taskId));

        if (targetTask is null)
            return;

            
        targetTask.Column.Cards.Remove(targetTask);
        IndexHelper.FixIndices(targetTask.Column.Cards);
        await db.SaveChangesAsync();

        await Modal.Close();
        await OnSubmit.InvokeAsync();
    }
}