@using Ticky.Base.Entities
@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref="Modal" Title="Delete column" OnSubmitAttempted="OnSubmitAttempted" RedSubmit="true">
    Are you sure you'd like to delete the column <b>@_columnName</b>?<br />
    All cards and data associated with this column will be deleted.<br />
    <b>This action is irreversible.</b>
</Modal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private int? _columnId;
    private string? _columnName;

    public async void Open(int columnId, string columnName)
    {
        _columnId = columnId;
        _columnName = columnName;

        if (_user.InstantDelete)
        {
            await OnSubmitAttempted();
            return;
        }

        StateHasChanged();
        base.Open();
    }

    private async Task OnSubmitAttempted()
    {
        if(Modal is null)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var targetColumn = await db.Columns
            .Include(x => x.Board)
                .ThenInclude(x => x.Columns)
        .FirstOrDefaultAsync(x => x.Id.Equals(_columnId));

        if (targetColumn is null)
            return;

        targetColumn.Board.Columns.Remove(targetColumn);
        targetColumn.Board.Columns.FixIndices();

        await db.SaveChangesAsync();

        await Modal.Close();
        await OnSubmit.InvokeAsync();
    }
}